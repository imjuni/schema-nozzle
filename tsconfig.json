{
  // This is an alias to @tsconfig/node12: https://github.com/tsconfig/bases
  "extends": "@tsconfig/node18/tsconfig.json",

  // Most ts-node options can be specified here using their programmatic names.
  "ts-node": {
    // It is faster to skip typechecking.
    // Remove if you want ts-node to do typechecking.
    "transpileOnly": true,
    "files": true,
    "compilerOptions": {
      // compilerOptions specified here will override those declared below,
      // but *only* in ts-node.  Useful if you want ts-node and tsc to use
      // different options with a single tsconfig.json.
    },
    "require": ["tsconfig-paths/register"]
  },
  "compileOnSave": false,
  "buildOnSave": false,
  "compilerOptions": {
    /* Basic Options */
    "module": "CommonJS",
    "moduleResolution": "Node",
    "lib": ["DOM", "DOM.Iterable", "ES2020"],
    "composite": true,
    "declaration": true /* Generates corresponding '.d.ts' file. */,
    // "declarationDir": "./dist/typings",
    "declarationMap": true /* Generates corresponding '.d.ts' file. */,
    "sourceMap": true /* Generates corresponding '.map' file. */,
    "outDir": "./dist" /* Redirect output structure to the directory. */,
    "removeComments": true /* Do not emit comments to output. */,

    /* Strict Type-Checking Options */
    "strict": true /* Enable all strict type-checking options. */,
    "strictNullChecks": true /* Enable strict null checks. */,
    "strictFunctionTypes": true /* Enable strict checking of function types. */,
    "strictBindCallApply": true /* Enable strict 'bind', 'call', and 'apply' methods on functions. */,
    "strictPropertyInitialization": true /* Enable strict checking of property initialization in classes. */,
    "noImplicitThis": true /* Raise error on 'this' expressions with an implied 'any' type. */,
    "importHelpers": false /* Import emit helpers from 'tslib'. */,

    /* Additional Checks */
    "noUnusedLocals": true /* Report errors on unused locals. */,
    "noUnusedParameters": true /* Report errors on unused parameters. */,
    "noImplicitReturns": true /* Report error when not all code paths in function return a value. */,
    "noFallthroughCasesInSwitch": true /* Report errors for fallthrough cases in switch statement. */,
    "isolatedModules": true /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */,
    "noUncheckedIndexedAccess": true /* TypeScript has a way to describe objects which have unknown keys but known values on an object, via index signatures. */,

    /* Module Resolution Options */
    // "moduleResolution": "Node16" /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */,
    "baseUrl": "." /* Base directory to resolve non-absolute module names. */,
    "rootDir": ".",
    "paths": {
      "#/*": ["src/*"]
    },
    "esModuleInterop": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,
    "allowSyntheticDefaultImports": true,

    /* Experimental Options */
    "experimentalDecorators": true /* Enables experimental support for ES7 decorators. */,
    "emitDecoratorMetadata": true /* Enables experimental support for emitting type metadata for decorators. */,
    "pretty": true
  },
  "include": ["src/**/*.ts"],
  "exclude": ["examples/**/*", "dist/**", "**/.configs/**", "**/docs/**/*"]
}
