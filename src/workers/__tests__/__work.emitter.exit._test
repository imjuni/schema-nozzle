import NozzleEmitter from '#/workers/NozzleEmitter';
import { CE_WORKER_ACTION } from '#/workers/interfaces/CE_WORKER_ACTION';
import { describe, expect, it, vitest } from 'vitest';

describe('WorkEmitter - terminate', () => {
  it('terminate', () => {
    const handle = vitest
      .spyOn(process, 'exit')
      .mockImplementationOnce((_code?: number | undefined) => {
        throw new Error('Exit triggered');
      });

    try {
      NozzleEmitter.terminate(0);
      handle.mockRestore();
    } catch (caught) {
      expect(caught).toBeDefined();
    }
  });

  it('terminate - undefined', () => {
    const handle = vitest
      .spyOn(process, 'exit')
      .mockImplementationOnce((_code?: number | undefined) => {
        throw new Error('Exit triggered');
      });

    try {
      NozzleEmitter.terminate();
      handle.mockRestore();
    } catch (caught) {
      expect(caught).toBeDefined();
    }
  });

  it('terminate - emit', () => {
    const handle = vitest
      .spyOn(process, 'exit')
      .mockImplementationOnce((_code?: number | undefined) => {
        throw new Error('Exit triggered');
      });

    try {
      const w = new NozzleEmitter();
      w.emit(CE_WORKER_ACTION.TERMINATE);
      handle.mockRestore();
    } catch (caught) {
      expect(caught).toBeDefined();
    }
  });
});
